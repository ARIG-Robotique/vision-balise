#include "OledBitmap.h"
#include "OledFont8x8.h"
#include "OledFont8x12.h"
#include "OledGraphics.h"
#include "Screen.h"
#include "utils.h"

const SSD1306::OledBitmap<8, 8> bulletFull{
        0x18, 0x7e, 0x7e, 0xff, 0xff, 0x7e, 0x7e, 0x18
};
const SSD1306::OledBitmap<8, 8> bulletEmpty{
        0x18, 0x66, 0x42, 0x81, 0x81, 0x42, 0x66, 0x18
};

const SSD1306::OledBitmap<128, 64> logo{
        0x00, 0x01, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0x80, 0x00,
        0x00, 0x03, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x80, 0x00,
        0x00, 0x03, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xc0, 0x00,
        0x00, 0x07, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0xe0, 0x00,
        0x00, 0x06, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x60, 0x00,
        0x00, 0x0c, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x30, 0x00,
        0x00, 0x1c, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x03, 0xc6, 0x00, 0x00, 0x00, 0x30, 0x00,
        0x00, 0x18, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x07, 0xe6, 0x00, 0x00, 0x00, 0x18, 0x00,
        0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x1c, 0x00,
        0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x0c, 0x00,
        0x00, 0x60, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x0e, 0x00,
        0x00, 0x60, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x06, 0x00,
        0x00, 0xc0, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x03, 0x00,
        0x01, 0xc0, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x03, 0x00,
        0x01, 0x80, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x01, 0x80,
        0x03, 0x00, 0xff, 0xff, 0xf8, 0x03, 0x3f, 0xff, 0xff, 0x07, 0xe0, 0x0f, 0xff, 0xff, 0x81, 0xc0,
        0x03, 0x03, 0xff, 0xff, 0xfc, 0x03, 0xff, 0xff, 0xff, 0x8f, 0xf0, 0x1f, 0xff, 0xff, 0xe0, 0xc0,
        0x06, 0x07, 0xff, 0xff, 0xfe, 0x01, 0xff, 0xff, 0xff, 0x8f, 0xf0, 0x3f, 0xff, 0xff, 0xe0, 0x60,
        0x0e, 0x07, 0xff, 0xff, 0xff, 0x01, 0xff, 0xff, 0xff, 0x8f, 0xf0, 0x7f, 0xff, 0xff, 0xf0, 0x60,
        0x0c, 0x0f, 0xff, 0xff, 0xff, 0x83, 0xff, 0xff, 0xff, 0x8f, 0xf0, 0xff, 0xff, 0xff, 0xf8, 0x30,
        0x1c, 0x0f, 0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0x8f, 0xf0, 0xff, 0xff, 0xff, 0xf8, 0x30,
        0x1c, 0x1f, 0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0x0f, 0xf0, 0xff, 0xff, 0xff, 0xfc, 0x38,
        0x0c, 0x1f, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xc0, 0x0f, 0xfc, 0x30,
        0x0e, 0x1f, 0xe0, 0x00, 0x3f, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xfe, 0x00, 0x03, 0xfc, 0x60,
        0x06, 0x1f, 0xe0, 0x00, 0x3f, 0xc7, 0xf8, 0x00, 0x00, 0x1f, 0xf1, 0xfe, 0x00, 0x03, 0xfc, 0x60,
        0x03, 0x1f, 0xf0, 0x00, 0x3f, 0xc7, 0xf8, 0x00, 0x00, 0x0f, 0xf1, 0xff, 0x00, 0x03, 0xfc, 0xc0,
        0x03, 0x1f, 0xff, 0xff, 0x3f, 0xc7, 0xf8, 0x00, 0x3e, 0x0f, 0xf0, 0xff, 0xff, 0xf3, 0xfc, 0xc0,
        0x01, 0x9f, 0xff, 0xff, 0xbf, 0xc7, 0xf8, 0x00, 0x7f, 0x0f, 0xf0, 0xff, 0xff, 0xfb, 0xfd, 0x80,
        0x01, 0x8f, 0xff, 0xff, 0xbf, 0xc7, 0xf8, 0x00, 0x7f, 0x0f, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x80,
        0x00, 0xcf, 0xff, 0xff, 0xbf, 0xcf, 0xf8, 0x00, 0xff, 0x0f, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0x00,
        0x00, 0xe7, 0xff, 0xff, 0xbf, 0xcf, 0xf8, 0x00, 0xff, 0x0f, 0xf0, 0x7f, 0xff, 0xff, 0xfe, 0x00,
        0x00, 0x63, 0xff, 0xff, 0xbf, 0xdf, 0xf8, 0x00, 0x7f, 0x0f, 0xf8, 0x3f, 0xff, 0xfb, 0xfe, 0x00,
        0x00, 0x31, 0xff, 0xff, 0xbf, 0xbf, 0xf8, 0x00, 0x7e, 0x0f, 0xf8, 0x0f, 0xff, 0xfb, 0xfc, 0x00,
        0x00, 0x30, 0x3f, 0xff, 0x1f, 0x37, 0xe0, 0x00, 0x1c, 0x03, 0xec, 0x03, 0xff, 0xf3, 0xfc, 0x00,
        0x00, 0x18, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x03, 0xfc, 0x00,
        0x00, 0x18, 0x00, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x03, 0xfc, 0x00,
        0x00, 0x0c, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x03, 0xfc, 0x00,
        0x00, 0x0e, 0x00, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x3f, 0xff, 0xfc, 0x00,
        0x00, 0x06, 0x00, 0x00, 0x01, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x80, 0x7f, 0xff, 0xfc, 0x00,
        0x00, 0x03, 0x00, 0x00, 0x03, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x0d, 0xc0, 0x7f, 0xff, 0xf8, 0x00,
        0x00, 0x03, 0xff, 0xff, 0xff, 0x60, 0x00, 0x00, 0x00, 0x00, 0x06, 0xff, 0xff, 0xff, 0xf8, 0x00,
        0x00, 0x01, 0xff, 0xff, 0xfe, 0x60, 0x00, 0x00, 0x00, 0x00, 0x06, 0xff, 0xff, 0xff, 0xf0, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x7f, 0xff, 0xe0, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x7f, 0xff, 0xc0, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x3f, 0xff, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

String getSystemTemp() {
#ifdef PI
    return arig_utils::exec("vcgencmd measure_temp | cut -d'=' -f2");
#else
    return arig_utils::exec("sensors | grep 'Package' | cut -d' ' -f5 | sed \"s/Â°/'/\"");
#endif
}

String getLocalIp() {
    return arig_utils::exec("hostname -I | cut -d' ' -f1");
}

Screen::Screen(Config *config) {
    this->config = config;

#ifdef PI
    display = new SSD1306::OledI2C("/dev/i2c-1", 0x3C);
#else
    display = new SSD1306::OledBitmap<128, 64>();
#endif
}

void Screen::showLogo() {
    display->setFrom(logo, SSD1306::OledPoint(0, 0));
    update();
}

void Screen::clear() {
    display->clear();
    update();
}

void Screen::showInfo(const string &line1, const string &line2) {
    display->clear();

    SSD1306::box(SSD1306::OledPoint(2, 2),
                 SSD1306::OledPoint(125, 61),
                 SSD1306::PixelStyle::Set,
                 *display);

    printLn(line1, 0);
    printLn(line2, 1);
    printLn(getSystemTemp(), 2);
    printLn(getLocalIp(), 3);

    update();
}

void Screen::showDetection(const json &detectionResult) {
    display->clear();

    SSD1306::box(SSD1306::OledPoint(0, 0),
                 SSD1306::OledPoint(127, 63),
                 SSD1306::PixelStyle::Set,
                 *display);

    if (!detectionResult["girouette"].empty()) {
        string girouette =
                detectionResult["girouette"] == DIR_UP ? "N" : detectionResult["girouette"] == DIR_DOWN ? "S" : "?";
        SSD1306::drawString8x12(SSD1306::OledPoint(64 - 4, 36),
                                girouette,
                                SSD1306::PixelStyle::Set,
                                *display);
    }

    if (!detectionResult["ecueilEquipe"].empty() && !detectionResult["ecueilAdverse"].empty()) {
        string ecueilGauche;
        string ecueilDroit;
        for (const auto &item : detectionResult["ecueilEquipe"]) {
            if (config->team == TEAM_BLEU) {
                ecueilDroit += item == COLOR_RED ? "R" : item == COLOR_GREEN ? "G" : "?";
            } else {
                ecueilGauche += item == COLOR_RED ? "R" : item == COLOR_GREEN ? "G" : "?";
            }
        }
        for (const auto &item : detectionResult["ecueilAdverse"]) {
            if (config->team == TEAM_BLEU) {
                ecueilGauche += item == COLOR_RED ? "R" : item == COLOR_GREEN ? "G" : "?";
            } else {
                ecueilDroit += item == COLOR_RED ? "R" : item == COLOR_GREEN ? "G" : "?";
            }
        }
        reverse(ecueilGauche.begin(), ecueilGauche.end());

        SSD1306::drawString8x12(SSD1306::OledPoint(64 + 10, 50),
                                ecueilDroit,
                                SSD1306::PixelStyle::Set,
                                *display);
        SSD1306::drawString8x12(SSD1306::OledPoint(64 - 10 - 5 * 8, 50),
                                ecueilGauche,
                                SSD1306::PixelStyle::Set,
                                *display);
    }

    if (!detectionResult["bouees"].empty()) {
        vector<SSD1306::OledPoint> positions = {
                SSD1306::OledPoint(30 - 4, 40),
                SSD1306::OledPoint(40 - 4, 30),
                SSD1306::OledPoint(50 - 4, 20),
                SSD1306::OledPoint(58 - 4, 10),
                SSD1306::OledPoint(70 - 4, 10),
                SSD1306::OledPoint(76 - 4, 20),
                SSD1306::OledPoint(84 - 4, 30),
                SSD1306::OledPoint(92 - 4, 40),
        };

        short i = 0;
        for (const auto &item : positions) {
            if (detectionResult["bouees"][i++] == BOUE_PRESENT) {
                display->setFrom(bulletFull, item);
            } else {
                display->setFrom(bulletEmpty, item);
            }
        }
    }

    SSD1306::drawString8x8(SSD1306::OledPoint(2, 2),
                            getSystemTemp(),
                            SSD1306::PixelStyle::Set,
                            *display);

    SSD1306::drawString8x12(SSD1306::OledPoint(125 - 5 * 8, 2),
                            config->team,
                            SSD1306::PixelStyle::Set,
                            *display);

    update();
}

void Screen::update() {
#ifdef PI
    display->displayUpdate();
#else
    Mat image(64, 128, CV_8UC3, Scalar(0, 0, 0));

    for (short r = 0; r < 64; r++) {
        for (short c = 0; c < 128; c++) {
            if (display->isSetPixel(SSD1306::OledPoint(c, r))) {
                image.at<Vec3b>(r, c) = Vec3b(255, 255, 255);
            }
        }
    }

//    imshow("Screen", image); // FIXME ne fonctionne pas depuis un thread
    imwrite(config->outputPrefix + "screen.png", image);
#endif
}

void Screen::printLn(const string &str, short line) {
    SSD1306::drawString8x12(SSD1306::OledPoint(8, 8 + line * 12),
                            str,
                            SSD1306::PixelStyle::Set,
                            *display);
}
